syllabus
========
Concepts of process in Unix – process creation – process
status – Background and foreground Jobs – Job Execution with
low priority – Signals – Termination of process – Job control
TCP/IP Networking tools – talk, mesg, finger, telnet, rlogin, ftp, rcp,
rsh – security for the Berkeley r-Utilities.

------------------------------------------------------------------------------------------------------------------------------

• A process is a program in execution.
• The process is said to be born when the program starts execution.
• The process remains alive as long as the program is active.
• The process is said to be dead when the program completes execution.
• Usually, the name of the process is same as the name of the program being executed.
For ex: A process named grep is created when grep command is being executed.
• The kernel is responsible for management of process.
• Kernel determines the priorities for processes so that multiple processes can share CPU resources.
• The processes have attributes:-

1) The Process-Id (PID)
 PID is a unique integer used to identify each process uniquely.
 PID is allocated by the kernel when the process is born.
 PID can be used to control a process.
2) The Parent PID (PPID)
 The PID of the parent is available as a process attribute.
 
A process in a Unix system is created by fork system call. Every process except process 0 is created. 
The process that invokes the fork system call is parent process and the newly created process is the child process. 

Every process has one parent process but a parent can have many child process. 
The kernel identifies it process by its process identification number (PID).
Process 0 is a special process created "by hand" when the system boots.

There are 3 distinct phase in mechanism of process creation and uses 3 system calls: fork(), exec() and wait(). 


fork(): Creates a child process. A new process is created because an existing process creates an exact copy of itself. 
This child process has the same environment as its parent but only the PID is different. This procedure is known as forking. 

exec(): After forking the process, the address space of the child process is overwritten by the new process data. 
This is done through exec call to the system. No new process is created over here. The PID & PPID remains unchanged. 

wait(): The parent then executes wait system call to wait for the child process to complete its execution. 

The important attributes that are inherited by the child process from its parents are: 
Real UID and GID, PGID, Nice value, Environment setting, Current working directory, memory segments etc. 

 When the process dies it immediately moves to the zombie state and remains in that state until the parent picks it up to exit status. 
 A zombie is the harmless dead child. 

When a child dies kernel send SIGCHLD signal to parent for information. 
It is also possible for the parent to die before child dies. 
The child then becomes an orphan process and kernel makes 'init' parent of all the orphans. 
When this adopted child dies 'init' picks up it to exit status

--------------------------------------------------------------------------------------------------------------------------------------
Starting a Process
-------------------
When you start a process (run a command), there are two ways you can run it −
 Foreground Processes
 Background Processes

Foreground Processes
====================
By default, every process that you start runs in the foreground. It gets its input from the
keyboard and sends its output to the screen.

for eg:
ls command is performed.The process runs in the foreground, the output is directed to my screen, and if the ls
command wants any input (which it does not), it waits for it from the keyboard.

While a program is running in the foreground and is time-consuming, no other commands
can be run (start any other processes) because the prompt would not be available until
the program finishes processing and comes out.

Background Processes
====================
A background process runs without being connected to your keyboard. If the background
process requires any keyboard input, it waits.
The advantage of running a process in the background is that you can run other
commands; you do not have to wait until it completes to start another!

The simplest way to start a background process is to add an ampersand (&) at the end of
the command.
eg:
$ls ch*.doc &

-------------------------------------------------------------------------------------------------------------------------------
Listing Running Processes
=========================

use PS command ---> process status. (f-a-x-u-e)

nidhi@nidhi-HP-Notebook-15-Laptop-PC:~$ ps
  PID TTY          TIME CMD
 3549 pts/4    00:00:00 bash
 4578 pts/4    00:00:00 ps


-->-f ( f for full) option, which provides more information
nidhi@nidhi-HP-Notebook-15-Laptop-PC:~$ ps -f
UID        PID  PPID  C STIME TTY          TIME CMD
nidhi     3549  3543  0 Jan01 pts/4    00:00:00 bash
nidhi     4848  3549  0 07:01 pts/4    00:00:00 ps -f

options:-

Option Description
-a Shows information about all users
-x Shows information about processes without terminals
-u Shows additional information like -f option
-e Displays extended information

----------------------------------------------------------------------------------------------------------------------------

Zombie and Orphan Processes
===========================
Normally, when a child process is killed, the parent process is updated via a SIGCHLD
signal. Then the parent can do some other task or restart a new child as needed. However,
sometimes the parent process is killed before its child is killed. In this case, the "parent of
all processes," the init process, becomes the new PPID (parent process ID). In some
cases, these processes are called orphan processes.

When a process is killed, a ps listing may still show the process with a Z state. This is a
zombie or defunct process. The process is dead and not being used. These processes are
different from the orphan processes. They have completed execution but still find an entry
in the process table.
------------------------------------------------------------------------------------------------------------------------------

The top Command
---------------
The top command is a very useful tool for quickly showing processes sorted by various
criteria.
It is an interactive diagnostic tool that updates frequently and shows information about
physical and virtual memory, CPU usage, load averages, and your busy processes.
Here is the simple syntax to run top command and to see the statistics of CPU utilization
by different processes −

syntax:  $top

--------------------------------------------------------------------------------------------------------------------------------
Running jobs at low priority
============================

A specific UNIX command that lets you run your background jobs (See section Running jobs in the background)
at low priority is the nice command. 
It helps prevent compute-bound applications from slowing down interactive use of the computer. 
This includes your own interactive use in the foreground. nice accepts priority numbers from 1 to 20, 
where higher numbers mean lower priority. 
For example, to execute a program called number-cruncher at low priority in the background, you could type 
nice +20 number-cruncher &

Enter the nice command this way when you're in the C shell. 
When you're in the Bourne shell, enter it the same way except replace the plus (+) before the 20 with a minus (-). 
Note that there are 4 different forms of nice. 

To see the nice values of processes, we can use utilities such as ps, top or htop.

To view processes nice value with ps command in user-defined format (here the NI column shows niceness of processes).

$ ps -eo pid,ppid,ni,comm


PR AND PRI
----------
    NI – is the nice value, which is a user-space concept, while
    PR or PRI – is the process’s actual priority, as seen by the Linux kernel. (In top and htop command respectively)
    
How To Calculate PR or PRI Values
=================================

Total number of priorities = 140
Real time priority range(PR or PRI):  0 to 99 
User space priority range: 100 to 139

Nice value range (NI): -20 to 19

PR = 20 + NI
PR = 20 + (-20 to + 19)
PR = 20 + -20  to 20 + 19
PR = 0 to 39 which is same as 100 to 139.

if PR = rt -----> real time scheduling priority 
-----------------------------------------------------------------------------------------------------------------------------
How to Run A Command with a Given Nice Value in Linux ??
--------------------------------------------------------

sudo nice -n -20 su -c command_to_run user_to_run_as


Change the Scheduling Priority of a Process in Linux
----------------------------------------------------

nidhi@nidhi-HP-Notebook-15-Laptop-PC:~$ sudo renice -n  -12  -p 5886
5886 (process ID) old priority 0, new priority -12

note: Any changes you make with renice command to a user’s processes nice values are only 
      applicable until the next reboot.
      
 -----> therefore Set Default Nice Value Of a Specific User’s Processes
        syntax :  <username>  <hard|soft>  priority  <nice value>
        
--------------------------------------------------------------------------------------------------------------------------------

TERMINATION OF PROCESS
======================

Linux Operating System comes with Kill command to terminate a process.

For a kill command a Signal Name could be:

Signal Name		Signal Value			Behaviour

SIGHUP			      1				Hangup
SIGKILL			     9				Kill Signal
SIGTERM			     15			Terminate


SIGTERM is the default and safest way to kill a process. 
SIGHUP is less secure way of killing a process as SIGTERM. 
SIGKILL is the most unsafe way among the above three, to kill a process which terminates a process without saving

In order to kill a process, we need to know the Process ID of a process. A Process is an instance of a program. Every-time a program starts, automatically an unique PID is generated for that process. 
Every Process in Linux, have a pid. 
The first process that starts when Linux System is booted is – init process, hence it is assigned a 
value of ‘1‘ in most of the cases.

Init is the master process and can not be killed this way, which insures that the master process don’t gets killed accidentally. Init decides and allows itself to be killed, where kill is merely a request for a shutdown.


eg:

kill -9 3139
kill -SIGTERM 3139


pkill
-----

killing a process using process name
syntax: pkill <process-name>

killall
-------

if a process have too many instances and a number of child processes, we have a command ‘killall‘.
syntax: killall [signal or option] Process Name 

--------------------------------------------------------------------------------------------------------------------------------

TCP/IP NETWORKING TOOLS
========================

1.talk
  ----
Talk is a visual communication program which copies lines from your terminal to that of another user,
much like an instant messenger service. When first called, talk contacts the talk daemon on the other user's machine, 
which sends the message below.

Message from TalkDaemon@his_machine...
talk: connection requested by your_name@your_machine.
talk: respond with: talk your_name@your_machine

to that user. At this point, he then replies by typing

talk your_name@your_machine 

Typing control-L (^L) will cause the screen to be reprinted. The erase, kill line, and word erase characters 
(normally ^H, ^U, and ^W, respectively) will behave normally. To exit, just type the interrupt character (normally ^C); 

syntax:
------
talk person [ttyname]

Options

person
------
If you want to talk to someone on your machine, then person is just the person's login name. 
If you want to talk to a user on another host, then person is of the form 'user@host'.

ttyname
-------
If you want to talk to a user who is logged in more than once, the ttyname argument may
be used to indicate the appropriate terminal name, where ttyname is of the form 'ttyXX' or 'pts/X.

2.mesg
  ----
  
 The mesg command allows you control write access to your terminal by other users.
  
 The write command allows other users to send a message to your terminal session; 
 the mesg command is used to toggle these messages on or off.
 
mesg syntax
----------

mesg [n|y]

Options
-------
n 	Prevents the display of terminal messages from other users. This option is like using a "do not disturb" sign.
y 	Allows messages to be displayed on your screen.

If no option is given, mesg displays the current access state of your terminal

3.finger
  ------
  
  finger command is used to lookup information about an user.
  
nidhi@nidhi-HP-Notebook-15-Laptop-PC:~$ finger
Login     Name       Tty      Idle  Login Time   Office     Office Phone
nidhi     nidhi      tty7    20:07  Jan  1 13:08 (:0)


ENVIRONMENT VARIABLES
======================

Each process in Unix has its own set of environment variables. 
They're called environment variables because the default set of such variables consists mostly of 
session-wide variables used for configuration purposes.

From the point of a Unix shell though, environment variables can be accessed the same way as any other variable.

    PATH – Display lists directories the shell searches, for the commands.
    HOME – User’s home directory to store files.
    TERM – Set terminal emulator being used by UNIX.
    PS1 – Display shell prompt in the Bourne shell and variants.
    MAIL – Path to user’s mailbox.
    TEMP – Path to where processes can store temporary files.
    JAVA_HOME – Sun (now Oracle) JDK path.
    ORACLE_HOME – Oracle database installation path.
    TZ – Timezone settings
    PWD – Path to the current directory.
    HISTFILE – The name of the file in which command history is saved
    HISTFILESIZE -The maximum number of lines contained in the history file
    HOSTNAME -The system’s host name
    LD_LIBRARY_PATH -It is a colon-separated set of directories where libraries should be searched for.
    USER -Current logged in user’s name.
    DISPLAY -Network name of the X11 display to connect to, if available.
    SHELL -The current shell.
    TERMCAP – Database entry of the terminal escape codes to perform various terminal functions.
    OSTYPE – Type of operating system.
    MACHTYPE – The CPU architecture that the system is running on.
    EDITOR – The user’s preferred text editor.
    PAGER – The user’s preferred text pager.
    MANPATH – Colon separated list of directories to search for manual pages.

Display Environment Variable
----------------------------

EG:
To display search path, enter:
echo $PATH

To display prompt settings, enter:
echo $PS1

A few more examples:

echo $USER
echo $PWD
echo $MAIL
echo $JAVA_PATH
echo $DB2INSTANCE
  
  
Change or Set Environment Variable
----------------------------------
The syntax is as follows:

export var=value





